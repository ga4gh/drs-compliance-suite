import json
from compliance_suite.constants import *
from unittests.resources.expected_service_info import expected_good_service_info_response as expected_response
from parameterized import parameterized
from compliance_suite.report_runner import report_runner, send_request, get_config_json

auth_types = ["none", "basic", "bearer", "passport"]
port_numbers = ["8089", "8090", "8091", "8092"]

def json_string_formatting(json_string):
    return str(json_string).replace("'", '"').replace("\\","")

def mock_report_runner():
    """
    This method generates and returns a list of tuples representing the good mock server report

    Each tuple contains two values:
    - authtype: Represents the authentication type.
    - good_mock_actual_report_json: Represents the report JSON generated by the mock report runner.
    """

    reports = []

    for authtype, port in zip(auth_types, port_numbers):
        good_mock_actual_report = report_runner(
            server_base_url="http://localhost:" + port + "/ga4gh/drs/v1",
            platform_name="good mock server",
            platform_description=authtype,
            drs_version="1.2.0",
            config_file="compliance_suite/config/config_samples/config_" + authtype + ".json"
        )

        good_mock_actual_report_json = json.loads(good_mock_actual_report.to_json())

        # Remove timestamps
        good_mock_actual_report_json["start_time"] = ""
        good_mock_actual_report_json["end_time"] = ""
        for phase in good_mock_actual_report_json["phases"]:
            phase["start_time"] = ""
            phase["end_time"] = ""
            for test in phase["tests"]:
                test["start_time"] = ""
                test["end_time"] = ""
                for case in test["cases"]:
                    case["start_time"] = ""
                    case["end_time"] = ""

        reports.append((authtype, good_mock_actual_report_json))

    return reports

def mock_request():
    # the other endpoints for possible future tests with drs_object_info and drs_object_access
    # endpoints = [SERVICE_INFO_URL, DRS_OBJECT_INFO_URL, DRS_ACCESS_URL]

    endpoint_url = SERVICE_INFO_URL

    responses = []

    for authtype, port in zip(auth_types, port_numbers):
        server_base_url = "http://localhost:"+port+"/ga4gh/drs/v1"

        config_file = "compliance_suite/config/config_samples/config_" + authtype + ".json"

        # the other endpoints for possible future tests with drs_object_info and drs_object_access
        config_service_info, config_drs_object_info, config_drs_object_access = get_config_json(config_file)
        auth_token = config_service_info["auth_token"]

        actual_response = send_request(server_base_url, endpoint_url, authtype, auth_token)
        
        responses.append((actual_response.json(),))

    return responses

@parameterized.expand(mock_report_runner())
def test_report_runner(authtype, good_mock_actual_report_json):
    expect_final_json = json.loads(open(f"unittests/output/expected_good_{authtype}.json", "r").read())
    assert good_mock_actual_report_json == expect_final_json


@parameterized.expand(mock_request())
def test_send_response(actual_response):
    assert actual_response == expected_response